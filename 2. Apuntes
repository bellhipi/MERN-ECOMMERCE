https://www.youtube.com/watch?v=204v5QXHlmc&t=15s&ab_channel=Fazt

la carpeta app tiene todo el código del front

para convertir una alerta en algo que pueda interpretar el navegador vamos a intalar la siguiente librería

npm install webpack -D

con el -D lo intalo como dependencia de desarrollo

npm intall webpack-cli -D

esta sirve para que webpack internamente funcione

por fuera de todo creamos un archivo webpack.config.js (tiene que tener ese nombre)
para darle la configuración a webpack

Agregamos en el package.json un script webpack: "webpack --mode development"
entonces cuando ejecutamos npm run webpack lo que estamos haciendo es ejecutar por mi el comando webpack --mode development

> mern@1.0.0 webpack
> webpack --mode development

asset bundle.js 1.23 KiB [emitted] (name: main)
./src/app/index.js 26 bytes [built] [code generated]
webpack 5.85.1 compiled successfully in 286 ms

genera un archivo bundle.js en la carpeta public
dentro de ese archivo nos encontramos con la alerta pero escrito todo raro
esto es porque webpack se puede complementar de otras herramientas para hacer otro tipo de tareas

Basicament nuestro archivo nos muestra que el código está convertido

Entonces lo que hacemos es llamar al script desde html y luego npm run dev
y vemos en el localhost:3000
que no sale nuestro cartel de alerta

vamos a instalar los modulos para que mi computadora entienda react
react es el modulo principal
y react-dom es el módulo para el navegador
npm install react react-dom -D
con la -D podemos instalarlos como módulos de dependencia del desarrollo
polque? no hay polque... (minuto 10:39)

hago un render en el index.js de app
luego hago en la consola un npm run webpack para que se traduzca
pero webpack puede traducir solo js
y el código que hicimos es jsx (combinación de js y html)

para poder traducir todo esto necesitamos otro módulo:

npm install babel-core babel-loader babel-preset-react babel-preset-env -D

el babel-loader sirve para que webpack pueda tomar babel y hacerla funcionar internamente
tambien tenemos que decirle que es lo que debe traducir, esto lo hacemos con los preset
el preset-env es para decirle que traduzca el código jsx o de java script moderno

cramos un archivo .babelrc es para decirle a babel que sintaxis es la encargada de traducir
babel internamente va a buscar este archivo .babelrc, que es un archivo oculto
y entonces va a decir ok, tengo que traducri toda la sintaxis moderna de js y toda la sintaxis de react

pero pero pero
todavía no le pedimos a webpack que intente traducir sintaxis moderna
así que vamos a agregar eso en la config de webpack

luego guardamos y en la consola ponemos npm run webpack

ERROR:
> webpack --mode development

node:internal/process/promises:279
            triggerUncaughtException(err, true /* fromPromise */);
            ^

Error: Plugin/Preset files are not allowed to export objects, only functions. 

Googleando encontré que el problema del error es una incompatibilidad entre el babel core 6 y babel loader 7
la siguiente página lo explica muy bien:
https://www.positioniseverything.net/error-plugin/preset-files-are-not-allowed-to-export-objects-only-functions/

Tal como dice en esa página me fijé las versiones en el package.json:

   "babel-core": "^6.26.3",
    "babel-loader": "^9.1.2",

Para solucionarlo desinstalé las dependencias que tenía:
npm uninstall babel-core babel-loader babel-preset-react babel-preset-env -D

https://medium.com/@elisealcala/empieza-un-nuevo-proyecto-react-f3fea6254d1
npm install @babel/core babel-loader @babel/preset-env @babel/preset-react -D

ahora me quedó estas versiones:
"devDependencies": {
    "@babel/core": "^7.22.10",
    "@babel/preset-env": "^7.22.10",
    "@babel/preset-react": "^7.22.5",
    "babel-loader": "^9.1.3",
    "nodemon": "^2.0.22",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "webpack": "^5.85.1",
    "webpack-cli": "^5.1.3"
  }
  
Y en el archivo .babelrc escribimos:
{
    "presets": ["@babel/preset-env", "@babel/preset-react"]
}

y ahora en el archivo bundle.js vamos a ver que tenemos mucho más código y más pesado
eso es porque tenemos internamente aquí react, entonces podemos utilizar la aplicación sin necesidad de llamar a ninguna biblioteca

f12
warning:
react-dom.development.js:86 Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot

Ok, ahora vuelvo a conectar la bd como se explica en el apunte 1, luego ejecuto npm run dev
abro otra terminal, y en el package.json agrego --watch en el script de webpack
en la nueva  terminal ejecuto npm run webpack y debería aparecer una leyenda en la ejecución que dice
webpack is watching the files...
A MI NO ME APARECE
Pero parece que igual funciona porque la idea es que eso hace que no corte la traducción
sino que si modifico el index.js y refresco la página me hace la traducción en tiempo de ejecución

Ya termine con todo esto ahora vamos al fornt
voy a crar un archivo App.js en la carpeta app y pasarle lo que tiene index.js
de esta forma lo voy a usar como componenete

Ahora vamos a modificar App.js
Como react puede montar solamente un componenete a la vez
vamos a cambiar el h1 y colocar un div

bueno, ahora se viene algo interesante
voy a aprender a usar frameworks? puede ser.. no se sabe...
spoiler: sí
en lugar de ponernos a usar un css de cero vamos a usar un framework
https://materializecss.com/
lo traemos a través del CDN

    <!-- Compiled and minified CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

    <!-- Compiled and minified JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
            

uno es para el css y otro para el javascript
el css es para estilizar la aplicación
y el javascript me va a dar el uso de barras laterales etc..
asi que vamos a copiar los dos
el css lo pegamos en el index.html debajo del titulo
el javascript lo pegamos en el index.html antes del bundle

ahora vamos a agregar lo iconos buscando icons en la misma página
https://materializecss.com/icons.html

  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  
Los pego despues del css

Seguimos con el front en App.js, creamos un botón send
cuando apretamos ese botón vemos que se refresca la página con la siguiente url
http://localhost:3000/?
Pero no quiero eso sino que quiero recibir los datos del formulario, para eso voy a crear un evento...
Una vez que obtuve los datos ahora quiero enviarlos:
No necesito poner todo el url porque mi aplicación de react esta servida por el mismo servidor
fetch('/api/tasks', {
            //a traves de este metodo envío la petición
            method: 'POST',
            //stringify es para convertir a string
            body: JSON.stringify(this.state),
            //objeto con el tipo de contenido que le voy a enviar
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        })
            //muestro por consola lo que retorna
            .then(res => console.log(res))
            //captura el error y muestra por consola
            .catch(err => console.error(err));


con f12 veo response y una url si la copio y pego se ve lo que se da de alta en la bd
en el servidor habiamos creado un mensaje que decía tarea guardada, asi que ahora quiero ver ese mensaje
tengo que convertir la respuesta en formato json
ahora veo en el f12 que dice tarea guardada pero quiero que ese mensaje me aparezca en una ventana
con el js que copiamos del framework materialize, esto trae una funcion que nos permite hacer lo que queremos
esa ventana se llama toast
M es una variable global que nos da materialize
M.toast()

cramos una funcion que cuando se ejecute llamará a fetchTasks y trae la info que hay en la bd
también mostramos el mensaje de que fue guardado en la bd ese registro
con f12 ahora vemos un array con todos los componentes de la bd y cuando enviamos nos dice tarea guardada

Agrego una tabla, agrego un array de tareas en el constructor
obtener tareas se encarga de completar el array (fetchTasks)
agrego código jsx en el medio de la tabla de html para poder mostrar en la tablo los datos de la bd
cuando hago f12 se ven las tareas en la tabla y me va a salir un warning que dice que cada elemento del array debe tener la propiedad key
agregamos esa propidedad en el tr del return usando _id que es el id propio de mongo

ahora si nosotros agregamos una tarea se guarda en la bd pero no se muestra en la tabla la tarea nueva
esto es porque no sabe que cambió entonces voy a hacer que al apretar el botón se actualice la tabla

ahora vamos por los botones de actulizar y eliminar
hacemos el método para eliminar las tareas
vamos a hacer el método para editar, para esto vamos a reutilizar el formulario
vamos a hacer una consulta de solo ese elemento a la bd, esto no es necesario hacerlo de esta forma
pero es para aprender a hacer consultas de un solo elemento
cuando hago el metodo de actualizar agrego el atributo _id vacío en el constructor
y dentro de la funcion se actualiza tambien el _id
esto es para que cuando apreto send verifique si el id esta vacío, si está vacío da de alta, sino actualiza
